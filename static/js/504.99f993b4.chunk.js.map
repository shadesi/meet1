{"version":3,"file":"static/js/504.99f993b4.chunk.js","mappings":"oNAMA,MA+FA,EA/FuBA,IAAuC,IAAtC,cAAEC,EAAa,cAAEC,GAAeF,EACtD,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,OACtCC,EAAUC,IAAeF,EAAAA,EAAAA,WAAS,IAEzCG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAgBA,KACpBF,EAAYG,OAAOC,YAAc,IAAI,EAMvC,OAHAF,IACAC,OAAOE,iBAAiB,SAAUH,GAE3B,IAAMC,OAAOG,oBAAoB,SAAUJ,EAAc,GAC/D,IAgCH,OACEK,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,UAAU,kDAAiDC,UAC9DH,EAAAA,EAAAA,KAACI,EAAAA,EAAG,CAACC,GAAG,OAAMF,UACZG,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CACTC,GAAG,mBACH,cAAY,mBACZN,UAAU,qBAAoBC,SAAA,EAE9BH,EAAAA,EAAAA,KAACS,EAAAA,EAAKC,MAAK,CAACC,QAAQ,mBAAmBT,UAAU,gBAAeC,SAAC,uBAGjEH,EAAAA,EAAAA,KAACS,EAAAA,EAAKG,QAAO,CACXJ,GAAG,mBACHK,KAAK,OACLX,UAAU,+CACVY,MAAO,CAAEC,MAAO,OAAQC,UAAW,UACnC,aAAW,mBACX,cAAY,yBACZC,MAAO5B,EACP6B,SAjDkBC,IAC1B,MAAMF,EAAQE,EAAMC,OAAOH,MAC3B3B,EAAc2B,GAEd,MAAMI,EAAcC,OAAOL,GAEvBM,MAAMF,KAAiBC,OAAOE,UAAUH,GAC1CjC,EAAc,0DACLiC,GAAe,EACxBjC,EAAc,4DACLiC,EAAc,IACvBjC,EAAc,oEAEdA,EAAc,IACdD,EAAckC,GAChB,EAmCQI,QAAUC,GAAMA,EAAEN,OAAOO,SACzBC,QAAUF,GAAMA,EAAEN,OAAOO,SACzBE,YAAY,4BAEd7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAc,CACbC,UAAU,MACVC,MAAO,CAAEC,KAAM,GAAIC,KAAM,KACzBC,QAjCYC,IACpBpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAO,CAAC7B,GAAG,mBAAoB4B,EAAOlC,UAAU,mBAAmB,cAAY,mBAAkBC,SAAC,gCAiC3F8B,OAAMzC,QAAkB8C,EACxBpC,UAAU,eAAcC,UAExBH,EAAAA,EAAAA,KAAA,KACEE,UAAU,oCACVuB,QA7CQc,KAClBjD,EAAc,MACdH,EAAcmC,OAAO,OACrBlC,EAAc,GAAG,EA2CPoD,KAAK,MACL,aAAW,yBACX,WAAS,yBACT1B,MAAO,CACL2B,SAAU,SACVC,MAAO,iBACPC,OAAQ,qBAMd,C","sources":["components/NumberOfEvents.js"],"sourcesContent":["// src/components/NumberOfEvents.js\n\nimport React, { useState, useEffect } from \"react\";\nimport { Form, InputGroup, Col, Row, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nconst NumberOfEvents = ({ setCurrentNOE, setErrorAlert }) => {\n  const [inputValue, setInputValue] = useState(\"32\");\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    const checkIfMobile = () => {\n      setIsMobile(window.innerWidth <= 768); \n    };\n\n    checkIfMobile();\n    window.addEventListener(\"resize\", checkIfMobile);\n\n    return () => window.removeEventListener(\"resize\", checkIfMobile);\n  }, []);\n\n  const handleInputChanged = (event) => {\n    const value = event.target.value;\n    setInputValue(value);\n\n    const numberValue = Number(value);\n\n    if (isNaN(numberValue) || !Number.isInteger(numberValue)) {\n      setErrorAlert(\"Please enter a valid integer for the number of events.\");\n    } else if (numberValue <= 0) {\n      setErrorAlert(\"Please enter a positive number for the number of events.\");\n    } else if (numberValue > 250) {\n      setErrorAlert(\"Maximum number of events is 250. Please enter a smaller number.\");\n    } else {\n      setErrorAlert(\"\");\n      setCurrentNOE(numberValue);\n    }\n  };\n\n  const handleClear = () => {\n    setInputValue(\"32\");\n    setCurrentNOE(Number(\"32\"));\n    setErrorAlert(\"\");\n  };\n\n  const resetTooltip = (props) => (\n    <Tooltip id=\"reset-tooltip\" {...props} className=\"bordered-tooltip\" data-testid=\"bordered-tooltip\">\n      Reset to default value (32)\n    </Tooltip>\n  );\n\n  return (\n    <Row className=\"align-items-center justify-content-center w-100\">\n      <Col xs=\"auto\">\n        <InputGroup\n          id=\"number-of-events\"\n          data-testid=\"number-of-events\"\n          className=\"align-items-center\"\n        >\n          <Form.Label htmlFor=\"number-of-events\" className=\"labelNOE me-2\">\n            Number of Events:\n          </Form.Label>\n          <Form.Control\n            id=\"number-of-events\"\n            type=\"text\"\n            className=\"number-of-events number-of-events-input me-2\"\n            style={{ width: \"70px\", textAlign: \"center\" }}\n            aria-label=\"Number of Events\"\n            data-testid=\"number-of-events-input\"\n            value={inputValue}\n            onChange={handleInputChanged}\n            onClick={(e) => e.target.select()}\n            onFocus={(e) => e.target.select()}\n            placeholder=\"Enter number of events\"\n          />\n          <OverlayTrigger\n            placement=\"top\"\n            delay={{ show: 50, hide: 400 }}\n            overlay={resetTooltip}\n            show={isMobile ? true : undefined}\n            className=\"resetTooltip\"\n          >\n            <i\n              className=\"bi bi-arrow-clockwise buttonReset\"\n              onClick={handleClear}\n              role=\"img\"\n              aria-label=\"Reset number of events\"\n              alt-text=\"Reset number of events\"\n              style={{\n                fontSize: \"1.5rem\",\n                color: \"cornflowerblue\",\n                cursor: \"pointer\",\n              }}\n            />\n          </OverlayTrigger>\n        </InputGroup>\n      </Col>\n    </Row>\n  );\n};\n\nexport default NumberOfEvents;\n"],"names":["_ref","setCurrentNOE","setErrorAlert","inputValue","setInputValue","useState","isMobile","setIsMobile","useEffect","checkIfMobile","window","innerWidth","addEventListener","removeEventListener","_jsx","Row","className","children","Col","xs","_jsxs","InputGroup","id","Form","Label","htmlFor","Control","type","style","width","textAlign","value","onChange","event","target","numberValue","Number","isNaN","isInteger","onClick","e","select","onFocus","placeholder","OverlayTrigger","placement","delay","show","hide","overlay","props","Tooltip","undefined","handleClear","role","fontSize","color","cursor"],"sourceRoot":""}