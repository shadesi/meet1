{"version":3,"file":"static/js/190.97ae02ed.chunk.js","mappings":"+IAIA,MAiFA,EAjFmBA,IAAqD,IAApD,aAAEC,EAAY,eAAEC,EAAc,aAAEC,GAAcH,EAChE,MAAOI,EAAiBC,IAAsBC,EAAAA,EAAAA,WAAS,IAChDC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,IAEnCK,GAAcC,EAAAA,EAAAA,UAAQ,IACnBX,EACHA,EAAaY,QAAQC,GACnBA,EAASC,cAAcC,SAAST,EAAMQ,iBAExC,IACH,CAACd,EAAcM,KAElBU,EAAAA,EAAAA,YAAU,KACmB,IAAvBN,EAAYO,QAA0B,KAAVX,EAC9BG,EAAY,yEAEZA,EAAY,IAEc,oBAAjBP,GACTA,EAAaM,EACf,GACC,CAACE,EAAaJ,EAAOJ,EAAcM,IAEtC,MAaMU,EAAyBA,KAC7BX,EAAS,IACTH,GAAmB,GACnBH,EAAe,OACfQ,EAAY,GAAG,EAQjB,OACEU,EAAAA,EAAAA,MAAA,OAAKC,GAAG,cAAaC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,UAAU,OACVC,YAAY,oBACZC,MAAOpB,EACPqB,QAASA,IAAMvB,GAAmB,GAClCwB,OAbaC,KAEjBC,YAAW,IAAM1B,GAAmB,IAAQ,IAAI,EAY5C2B,SAlCsBC,IAC1B,MAAMN,EAAQM,EAAMC,OAAOP,MAC3BnB,EAASmB,GACTtB,GAAmB,EAAK,IAiCrBE,IACCgB,EAAAA,EAAAA,KAAA,UAAQY,QAAShB,EAAwB,aAAW,kBAAiBG,SAAC,UAIvElB,IACCgB,EAAAA,EAAAA,MAAA,MAAIK,UAAU,cAAaH,SAAA,CACxBX,EAAYyB,KAAKC,IAChBd,EAAAA,EAAAA,KAAA,MAAIY,QAASA,IAtCIE,KACzB7B,EAAS6B,GACThC,GAAmB,GACnBH,EAAemC,GACf3B,EAAY,GAAG,EAkCY4B,CAAkBD,GAAYf,SAC9Ce,GADoDA,MAIzDd,EAAAA,EAAAA,KAAA,MAAIY,QAAShB,EAAuBG,UAClCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,0BAIL,C","sources":["components/CitySearch.js"],"sourcesContent":["// src/components/CitySearch.js\n\nimport React, { useState, useMemo, useEffect } from \"react\";\n\nconst CitySearch = ({ allLocations, setCurrentCity, setInfoAlert }) => {\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [infoText, setInfoText] = useState(\"\");\n\n  const suggestions = useMemo(() => {\n    return allLocations\n      ? allLocations.filter((location) =>\n          location.toUpperCase().includes(query.toUpperCase())\n        )\n      : [];\n  }, [allLocations, query]);\n\n  useEffect(() => {\n    if (suggestions.length === 0 && query !== \"\") {\n      setInfoText(\"We cannot find the city you are looking for. Please try another city.\");\n    } else {\n      setInfoText(\"\");\n    }\n    if (typeof setInfoAlert === 'function') {\n      setInfoAlert(infoText);\n    }\n  }, [suggestions, query, setInfoAlert, infoText]);\n\n  const handleInputChanged = (event) => {\n    const value = event.target.value;\n    setQuery(value);\n    setShowSuggestions(true);\n  };\n\n  const handleItemClicked = (suggestion) => {\n    setQuery(suggestion);\n    setShowSuggestions(false);\n    setCurrentCity(suggestion);\n    setInfoText(\"\");\n  };\n\n  const handleAllCitiesClicked = () => {\n    setQuery(\"\");\n    setShowSuggestions(false);\n    setCurrentCity(\"all\");\n    setInfoText(\"\");\n  };\n\n  const handleBlur = () => {\n    // Delay hiding suggestions to allow for click events on suggestions\n    setTimeout(() => setShowSuggestions(false), 200);\n  };\n\n  return (\n    <div id=\"city-search\">\n      <input\n        type=\"text\"\n        className=\"city\"\n        placeholder=\"Search for a city\"\n        value={query}\n        onFocus={() => setShowSuggestions(true)}\n        onBlur={handleBlur}\n        onChange={handleInputChanged}\n      />\n      {query && (\n        <button onClick={handleAllCitiesClicked} aria-label=\"Clear selection\">\n          Clear\n        </button>\n      )}\n      {showSuggestions && (\n        <ul className=\"suggestions\">\n          {suggestions.map((suggestion) => (\n            <li onClick={() => handleItemClicked(suggestion)} key={suggestion}>\n              {suggestion}\n            </li>\n          ))}\n          <li onClick={handleAllCitiesClicked}>\n            <b>See all cities</b>\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default CitySearch;\n"],"names":["_ref","allLocations","setCurrentCity","setInfoAlert","showSuggestions","setShowSuggestions","useState","query","setQuery","infoText","setInfoText","suggestions","useMemo","filter","location","toUpperCase","includes","useEffect","length","handleAllCitiesClicked","_jsxs","id","children","_jsx","type","className","placeholder","value","onFocus","onBlur","handleBlur","setTimeout","onChange","event","target","onClick","map","suggestion","handleItemClicked"],"sourceRoot":""}