{"ast":null,"code":"// src/api.js\n\nimport mockData from \"./mock-data\";\nimport NProgress from \"nprogress\";\n\n/**\n * Extract locations from the events data, removing duplicates.\n * @param {*} events - array of event objects\n * @returns Array of unique locations\n */\nexport const extractLocations = events => {\n  const extractedLocations = events.map(event => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\n/**\n * Check the validity of the access token.\n * @param {string} accessToken - the token to check\n * @returns Promise resolving to the token information\n */\nconst checkToken = async accessToken => {\n  const response = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);\n  const result = await response.json();\n  return result;\n};\n\n/**\n * Remove the query parameters from the URL.\n */\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\n/**\n * Fetch the list of events, using mock data for localhost.\n * @param {string} currentCity - the selected city\n * @param {number} currentNOE - the number of events to fetch\n * @returns Promise resolving to the array of events\n */\n\n/**\n * Get the access token from localStorage or redirect to Google authorization.\n * @returns Promise resolving to the access token\n */\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem(\"access_token\");\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const response = await fetch(\"https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url\");\n      const result = await response.json();\n      const {\n        authUrl\n      } = result;\n      return window.location.href = authUrl;\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};\n\n/**\n * Retrieve the access token using the provided authorization code.\n * @param {string} code - the authorization code from Google\n * @returns Promise resolving to the access token\n */\nconst getToken = async code => {\n  try {\n    const encodeCode = encodeURIComponent(code);\n    const response = await fetch(`https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/token/${encodeCode}`, {\n      method: 'GET',\n      // Changed to GET to match your serverless.yml\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    const access_token = result.tokens ? result.tokens.access_token : result.access_token;\n    if (access_token) {\n      localStorage.setItem(\"access_token\", access_token);\n      return access_token;\n    } else {\n      throw new Error('Token not found in response');\n    }\n  } catch (error) {\n    console.error('Error getting token:', error);\n    throw error; // Re-throw the error instead of calling error.json()\n  }\n};\nexport const getEvents = async (currentCity, currentNOE) => {\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    return mockData.slice(0, currentNOE);\n  }\n  if (!navigator.onLine) {\n    const events = localStorage.getItem(\"cachedEvents\");\n    NProgress.done();\n    return events ? JSON.parse(events) : [];\n  }\n  try {\n    const token = await getAccessToken();\n    if (token) {\n      removeQuery();\n      const encodedToken = encodeURIComponent(token);\n      const url = `https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/get-events/${encodedToken}`;\n      if (currentCity && currentNOE) {\n        url += `?city=${encodeURIComponent(currentCity)}&number=${currentNOE}`;\n      }\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result && result.events) {\n        NProgress.done();\n        localStorage.setItem(\"cachedEvents\", JSON.stringify(result.events));\n        localStorage.setItem(\"cachedEventsTimestamp\", new Date().getTime().toString());\n        return result.events;\n      } else {\n        throw new Error('No events found in response');\n      }\n    }\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    NProgress.done();\n    return [];\n  }\n};","map":{"version":3,"names":["mockData","NProgress","extractLocations","events","extractedLocations","map","event","location","locations","Set","checkToken","accessToken","response","fetch","result","json","removeQuery","newurl","window","history","pushState","pathname","protocol","host","getAccessToken","localStorage","getItem","tokenCheck","error","removeItem","searchParams","URLSearchParams","search","code","get","authUrl","href","getToken","encodeCode","encodeURIComponent","method","headers","ok","Error","status","access_token","tokens","setItem","console","getEvents","currentCity","currentNOE","startsWith","slice","navigator","onLine","done","JSON","parse","token","encodedToken","url","stringify","Date","getTime","toString"],"sources":["/Users/shanedesilva/Downloads/meet-ex-4.10 4/src/api.js"],"sourcesContent":["// src/api.js\n\nimport mockData from \"./mock-data\";\nimport NProgress from \"nprogress\";\n\n/**\n * Extract locations from the events data, removing duplicates.\n * @param {*} events - array of event objects\n * @returns Array of unique locations\n */\nexport const extractLocations = (events) => {\n  const extractedLocations = events.map((event) => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\n/**\n * Check the validity of the access token.\n * @param {string} accessToken - the token to check\n * @returns Promise resolving to the token information\n */\nconst checkToken = async (accessToken) => {\n  const response = await fetch(\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n  );\n  const result = await response.json();\n  return result;\n};\n\n/**\n * Remove the query parameters from the URL.\n */\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\n/**\n * Fetch the list of events, using mock data for localhost.\n * @param {string} currentCity - the selected city\n * @param {number} currentNOE - the number of events to fetch\n * @returns Promise resolving to the array of events\n */\n\n\n/**\n * Get the access token from localStorage or redirect to Google authorization.\n * @returns Promise resolving to the access token\n */\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem(\"access_token\");\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const response = await fetch(\n        \"https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url\"\n      );\n      const result = await response.json();\n      const { authUrl } = result;\n      return (window.location.href = authUrl);\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};\n\n/**\n * Retrieve the access token using the provided authorization code.\n * @param {string} code - the authorization code from Google\n * @returns Promise resolving to the access token\n */\nconst getToken = async (code) => {\n  try {\n    const encodeCode = encodeURIComponent(code);\n\n    const response = await fetch(\n      `https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/token/${encodeCode}`,\n      {\n        method: 'GET', // Changed to GET to match your serverless.yml\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    \n    const access_token = result.tokens ? result.tokens.access_token : result.access_token;\n    \n    if (access_token) {\n      localStorage.setItem(\"access_token\", access_token);\n      return access_token;\n    } else {\n      throw new Error('Token not found in response');\n    }\n  } catch (error) {\n    console.error('Error getting token:', error);\n    throw error; // Re-throw the error instead of calling error.json()\n  }\n};\n\nexport const getEvents = async (currentCity, currentNOE) => {\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    return mockData.slice(0, currentNOE);\n  }\n\n  if (!navigator.onLine) {\n    const events = localStorage.getItem(\"cachedEvents\");\n    NProgress.done();\n    return events ? JSON.parse(events) : [];\n  }\n\n  try {\n    const token = await getAccessToken();\n    if (token) {\n      removeQuery();\n      const encodedToken = encodeURIComponent(token);\n      const url = `https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/get-events/${encodedToken}`;\n      \n      if (currentCity && currentNOE) {\n        url += `?city=${encodeURIComponent(currentCity)}&number=${currentNOE}`;\n      }\n\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      if (result && result.events) {\n        NProgress.done();\n        localStorage.setItem(\"cachedEvents\", JSON.stringify(result.events));\n        localStorage.setItem(\n          \"cachedEventsTimestamp\",\n          new Date().getTime().toString()\n        );\n        return result.events;\n      } else {\n        throw new Error('No events found in response');\n      }\n    }\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    NProgress.done();\n    return [];\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}