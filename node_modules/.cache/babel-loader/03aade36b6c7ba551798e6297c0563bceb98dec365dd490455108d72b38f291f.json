{"ast":null,"code":"// src/api.js\n\nimport mockData from \"./mock-data\";\nimport NProgress from \"nprogress\";\n\n/**\n * Extract locations from the events data, removing duplicates.\n * @param {*} events - array of event objects\n * @returns Array of unique locations\n */\nexport const extractLocations = events => {\n  const extractedLocations = events.map(event => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\n/**\n * Check the validity of the access token.\n * @param {string} accessToken - the token to check\n * @returns Promise resolving to the token information\n */\nconst checkToken = async accessToken => {\n  const response = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);\n  const result = await response.json();\n  return result;\n};\n\n/**\n * Remove the query parameters from the URL.\n */\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\n/**\n * Fetch the list of events, using mock data for localhost.\n * @param {string} currentCity - the selected city\n * @param {number} currentNOE - the number of events to fetch\n * @returns Promise resolving to the array of events\n */\nexport const getEvents = async (currentCity, currentNOE) => {\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    return mockData.slice(0, currentNOE); // Simulate fetching a specific number of events\n  }\n  if (!navigator.onLine) {\n    const events = localStorage.getItem(\"cachedEvents\");\n    NProgress.done();\n    return events ? JSON.parse(events) : [];\n  }\n  const token = await getAccessToken();\n  if (token) {\n    removeQuery();\n    const url = `https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/get-events/${token}?city=${currentCity}&number=${currentNOE}`;\n    const response = await fetch(url);\n    const result = await response.json();\n    if (result) {\n      NProgress.done();\n      localStorage.setItem(\"cachedEvents\", JSON.stringify(result.events));\n      localStorage.setItem(\"cachedEventsTimestamp\", new Date().getTime().toString());\n      return result.events;\n    } else {\n      return null;\n    }\n  }\n};\n\n/**\n * Get the access token from localStorage or redirect to Google authorization.\n * @returns Promise resolving to the access token\n */\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem(\"access_token\");\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const response = await fetch(\"https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url\");\n      const result = await response.json();\n      const {\n        authUrl\n      } = result;\n      return window.location.href = authUrl;\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};\n\n/**\n * Retrieve the access token using the provided authorization code.\n * @param {string} code - the authorization code from Google\n * @returns Promise resolving to the access token\n */\nconst getToken = async code => {\n  try {\n    const encodeCode = encodeURIComponent(code);\n    const response = await fetch(`https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/token/${encodeCode}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const {\n      access_token\n    } = await response.json();\n    access_token && localStorage.setItem(\"access_token\", access_token);\n    return access_token;\n  } catch (error) {\n    error.json();\n  }\n};","map":{"version":3,"names":["mockData","NProgress","extractLocations","events","extractedLocations","map","event","location","locations","Set","checkToken","accessToken","response","fetch","result","json","removeQuery","newurl","window","history","pushState","pathname","protocol","host","getEvents","currentCity","currentNOE","href","startsWith","slice","navigator","onLine","localStorage","getItem","done","JSON","parse","token","getAccessToken","url","setItem","stringify","Date","getTime","toString","tokenCheck","error","removeItem","searchParams","URLSearchParams","search","code","get","authUrl","getToken","encodeCode","encodeURIComponent","ok","Error","status","access_token"],"sources":["/Users/shanedesilva/Downloads/meet-ex-4.10 4/src/api.js"],"sourcesContent":["// src/api.js\n\nimport mockData from \"./mock-data\";\nimport NProgress from \"nprogress\";\n\n/**\n * Extract locations from the events data, removing duplicates.\n * @param {*} events - array of event objects\n * @returns Array of unique locations\n */\nexport const extractLocations = (events) => {\n  const extractedLocations = events.map((event) => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\n/**\n * Check the validity of the access token.\n * @param {string} accessToken - the token to check\n * @returns Promise resolving to the token information\n */\nconst checkToken = async (accessToken) => {\n  const response = await fetch(\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n  );\n  const result = await response.json();\n  return result;\n};\n\n/**\n * Remove the query parameters from the URL.\n */\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\n/**\n * Fetch the list of events, using mock data for localhost.\n * @param {string} currentCity - the selected city\n * @param {number} currentNOE - the number of events to fetch\n * @returns Promise resolving to the array of events\n */\nexport const getEvents = async (currentCity, currentNOE) => {\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    return mockData.slice(0, currentNOE); // Simulate fetching a specific number of events\n  }\n\n  if (!navigator.onLine) {\n    const events = localStorage.getItem(\"cachedEvents\");\n    NProgress.done();\n    return events ? JSON.parse(events) : [];\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery();\n    const url = `https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/get-events/${token}?city=${currentCity}&number=${currentNOE}`;\n\n    const response = await fetch(url);\n    const result = await response.json();\n    if (result) {\n      NProgress.done();\n      localStorage.setItem(\"cachedEvents\", JSON.stringify(result.events));\n      localStorage.setItem(\n        \"cachedEventsTimestamp\",\n        new Date().getTime().toString()\n      );\n      return result.events;\n    } else {\n      return null;\n    }\n  }\n};\n\n/**\n * Get the access token from localStorage or redirect to Google authorization.\n * @returns Promise resolving to the access token\n */\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem(\"access_token\");\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const response = await fetch(\n        \"https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url\"\n      );\n      const result = await response.json();\n      const { authUrl } = result;\n      return (window.location.href = authUrl);\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};\n\n/**\n * Retrieve the access token using the provided authorization code.\n * @param {string} code - the authorization code from Google\n * @returns Promise resolving to the access token\n */\nconst getToken = async (code) => {\n  try {\n    const encodeCode = encodeURIComponent(code);\n\n    const response = await fetch(\n      `https://plqoig0l0f.execute-api.eu-central-1.amazonaws.com/dev/api/token/${encodeCode}`\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const { access_token } = await response.json();\n    access_token && localStorage.setItem(\"access_token\", access_token);\n    return access_token;\n  } catch (error) {\n    error.json();\n  }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}